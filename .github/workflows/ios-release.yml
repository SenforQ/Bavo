name: Build and Distribute

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: macos-14

    steps:
      - uses: actions/checkout@v2

      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.27.3'
    
      - name: Setup Flutter Environment
        run: |
          flutter clean
          flutter pub get 
      
      # 清除 Xcode 缓存
      - name: Clean Xcode Cache
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData
          rm -rf ~/Library/Developer/Xcode/iOS\ DeviceSupport
          rm -rf ~/Library/Developer/Xcode/Archives
          rm -rf ~/Library/Developer/Xcode/Products

      # 添加 Xcode 版本选择
      - name: Select Xcode 16.2
        run: sudo xcode-select -s /Applications/Xcode_16.2.app

      # 设置 CocoaPods
      # - name: Setup CocoaPods
      #   run: |
      #     cd ios
      #     rm -rf Pods
      #     rm -f Podfile.lock
      #     pod install --repo-update
          
      # 添加详细的环境信息调试步骤
      - name: Print Environment Info
        run: |
          echo "============= Environment Variables ============="
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          FLUTTER_ROOT=$(which flutter | xargs dirname | xargs dirname)
          echo "FLUTTER_ROOT: $FLUTTER_ROOT"
          echo "FLUTTER_APPLICATION_PATH: $GITHUB_WORKSPACE"
          echo "Current Directory: $(pwd)"


      - uses: cedvdb/action-flutter-build-ios@v1
        with:
          build-cmd: |
            flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-tree-shake-icons
          certificate-base64: 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
          
          certificate-password: 111111
          
          provisioning-profile-base64: MIIw5wYJKoZIhvcNAQcCoIIw2DCCMNQCAQExCzAJBgUrDgMCGgUAMIIg9AYJKoZIhvcNAQcBoIIg5QSCIOE8P3htbCB2ZXJzaW9uPSIxLjAiIGVuY29kaW5nPSJVVEYtOCI/Pgo8IURPQ1RZUEUgcGxpc3QgUFVCTElDICItLy9BcHBsZS8vRFREIFBMSVNUIDEuMC8vRU4iICJodHRwOi8vd3d3LmFwcGxlLmNvbS9EVERzL1Byb3BlcnR5TGlzdC0xLjAuZHRkIj4KPHBsaXN0IHZlcnNpb249IjEuMCI+CjxkaWN0PgoJPGtleT5BcHBJRE5hbWU8L2tleT4KCTxzdHJpbmc+Y29tMzJBOEFBQzRUOTwvc3RyaW5nPgoJPGtleT5BcHBsaWNhdGlvbklkZW50aWZpZXJQcmVmaXg8L2tleT4KCTxhcnJheT4KCTxzdHJpbmc+MzJBOEFBQzRUOTwvc3RyaW5nPgoJPC9hcnJheT4KCTxrZXk+Q3JlYXRpb25EYXRlPC9rZXk+Cgk8ZGF0ZT4yMDI1LTA5LTI1VDAyOjM0OjM1WjwvZGF0ZT4KCTxrZXk+UGxhdGZvcm08L2tleT4KCTxhcnJheT4KCQk8c3RyaW5nPmlPUzwvc3RyaW5nPgoJCTxzdHJpbmc+eHJPUzwvc3RyaW5nPgoJCTxzdHJpbmc+dmlzaW9uT1M8L3N0cmluZz4KCTwvYXJyYXk+Cgk8a2V5PklzWGNvZGVNYW5hZ2VkPC9rZXk+Cgk8ZmFsc2UvPgoJPGtleT5EZXZlbG9wZXJDZXJ0aWZpY2F0ZXM8L2tleT4KCTxhcnJheT4KCQk8ZGF0YT5NSUlGcnpDQ0JKZWdBd0lCQWdJUVF4Rk4vZWM3ZUE0ZU0wSXI0Z01qTGpBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSTFNRGt5TlRBeU1Ua3lOMW9YRFRJMk1Ea3lOVEF5TVRreU5sb3dnWW94R2pBWUJnb0praWFKay9Jc1pBRUJEQW96TWtFNFFVRkRORlE1TVRVd013WURWUVFEREN4cFVHaHZibVVnUkdsemRISnBZblYwYVc5dU9pQnphR1Z1WnlCbmRXRnVJQ2d6TWtFNFFVRkRORlE1S1RFVE1CRUdBMVVFQ3d3S016SkJPRUZCUXpSVU9URVRNQkVHQTFVRUNnd0tjMmhsYm1jZ1ozVmhiakVMTUFrR0ExVUVCaE1DUTA0d2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUNyeURWYjR1MkNmY21wS1o2eE9ZbWNrRzd4UlhTR3NEV29GWFhaNEVVRUxVcWFWY1BIUEFBUGZFOTRLME9kcjlHUU1iUWczMkhialhzWUJqTXhlVlBnOHE3R1VFalFncUUzeDB5aHRSK2NKNDlTTjFNbEMxem1ObVp5OCtHMjRjdzU5Uzgya2xDWEluZk1LQmZQU1VuU05ELzZKY0UvaU0wVGNESEpMckVPVm1LeUMwcm1ta1lXcXNaVDVqa2ttWmd1ZVN6WklRRnVWLzluSW1CT1R6RURSWEtJcnE1T1JMMElyVU5FNXFNamNyNGFhWUdBdDZzTHd0NlVEUndOVTlKZlFCM2hSRFJ4V0ZaQnRXV00wNGNCS0VLZ2xvM2w5QjRPMWdOMktWQzJCRzJ6czhtUW0zOTZqajdOZEdkMXFxUlpVL3NKS2o2enFkZDZzUXRKdTVHM0FnTUJBQUdqZ2dJak1JSUNIekFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGQW4rd0JXUSthOWtDcElTdVNZb1l3eVg3S2V5TUhBR0NDc0dBUVVGQndFQkJHUXdZakF0QmdnckJnRUZCUWN3QW9ZaGFIUjBjRG92TDJObGNuUnpMbUZ3Y0d4bExtTnZiUzkzZDJSeVp6TXVaR1Z5TURFR0NDc0dBUVVGQnpBQmhpVm9kSFJ3T2k4dmIyTnpjQzVoY0hCc1pTNWpiMjB2YjJOemNEQXpMWGQzWkhKbk16QXlNSUlCSGdZRFZSMGdCSUlCRlRDQ0FSRXdnZ0VOQmdrcWhraUc5Mk5rQlFFd2dmOHdnY01HQ0NzR0FRVUZCd0lDTUlHMkRJR3pVbVZzYVdGdVkyVWdiMjRnZEdocGN5QmpaWEowYVdacFkyRjBaU0JpZVNCaGJua2djR0Z5ZEhrZ1lYTnpkVzFsY3lCaFkyTmxjSFJoYm1ObElHOW1JSFJvWlNCMGFHVnVJR0Z3Y0d4cFkyRmliR1VnYzNSaGJtUmhjbVFnZEdWeWJYTWdZVzVrSUdOdmJtUnBkR2x2Ym5NZ2IyWWdkWE5sTENCalpYSjBhV1pwWTJGMFpTQndiMnhwWTNrZ1lXNWtJR05sY25ScFptbGpZWFJwYjI0Z2NISmhZM1JwWTJVZ2MzUmhkR1Z0Wlc1MGN5NHdOd1lJS3dZQkJRVUhBZ0VXSzJoMGRIQnpPaTh2ZDNkM0xtRndjR3hsTG1OdmJTOWpaWEowYVdacFkyRjBaV0YxZEdodmNtbDBlUzh3RmdZRFZSMGxBUUgvQkF3d0NnWUlLd1lCQlFVSEF3TXdIUVlEVlIwT0JCWUVGTE1JVjZMbWg2Vk03SmJiV2dGallwTk5ldk04TUE0R0ExVWREd0VCL3dRRUF3SUhnREFUQmdvcWhraUc5Mk5rQmdFRUFRSC9CQUlGQURBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWhNc2twbmhhajR0Tnl0Z2t1WWFmRVpabktnUm1LUU1uRzVvVHZqK2p3VFdWbzR1YWE4bE9EbmdWdGxKUTFJYy9uMEJkWnQvT1FhaDE1ZU9sVjJ3YTVEWXZjVTZ1ZTlQUkZxV1RBMndpclV2T3hYbWRrenpiT0E5SWkvWnppM2RaMHR2QUtRTXdrNEdzQS8vRWZlN3pBYkI5YVNJVG9GMVFodUUrS1U1K0F4ZGNTenViSytWV1d5aGlVZ3BGNStkSUlGQWhCR2hKdWU4V242c25CS0V6ODRRK0hwZ3RENTVOVGZXaFNZYnFBQWJXNUhaRzFnYkkyVG5DalNmaGY0RmFlMEY0NUhDd1VTdHRpMFNZRTZiY0hPV0lhNURNeXQvREU3eXFuK214SXdoTnhqSUJrN3JRYVEvUG1QMnFZeko1L2xUeWFhZXppd1QwZHBuOGE1a0wvQT09PC9kYXRhPgoJPC9hcnJheT4KCgk8a2V5PkRFUi1FbmNvZGVkLVByb2ZpbGU8L2tleT4KCTxkYXRhPk1JSU5uZ1lKS29aSWh2Y05BUWNDb0lJTmp6Q0NEWXNDQVFFeER6QU5CZ2xnaGtnQlpRTUVBZ0VGQURDQ0Exa0dDU3FHU0liM0RRRUhBYUNDQTBvRWdnTkdNWUlEUWpBTURBZFdaWEp6YVc5dUFnRUJNQTBNQ0ZCUVVVTm9aV05yQVFFQU1CQU1DbFJwYldWVWIweHBkbVVDQWdGc01CTU1Ea2x6V0dOdlpHVk5ZVzVoWjJWa0FRRUFNQllNQ0ZSbFlXMU9ZVzFsREFwemFHVnVaeUJuZFdGdU1Cb01DVUZ3Y0VsRVRtRnRaUXdOWTI5dE16SkJPRUZCUXpSVU9UQWREQXhEY21WaGRHbHZia1JoZEdVWERUSTFNRGt5TlRBeU16UXpOVm93SGd3T1ZHVmhiVWxrWlc1MGFXWnBaWEl3REF3S016SkJPRUZCUXpSVU9UQWZEQTVGZUhCcGNtRjBhVzl1UkdGMFpSY05Nall3T1RJMU1ESXhPVEkyV2pBZ0RCZFFjbTltYVd4bFJHbHpkSEpwWW5WMGFXOXVWSGx3WlF3RlUxUlBVa1V3SVF3SVVHeGhkR1p2Y20wd0ZRd0RhVTlUREFSNGNrOVREQWgyYVhOcGIyNVBVekFpREFST1lXMWxEQnBqYjIwek1rRTRRVUZETkZRNVgyUnBjMTh5TURJMU1Ea3lOREFyREJ0QmNIQnNhV05oZEdsdmJrbGtaVzUwYVdacFpYSlFjbVZtYVhnd0RBd0tNekpCT0VGQlF6UlVPVEFzREFSVlZVbEVEQ1JoWldGaU1UWTFaUzAwWXpJekxUUm1aVFl0T0RJeFppMDBabVl3WldRNE9URmxNelV3T3d3VlJHVjJaV3h2Y0dWeVEyVnlkR2xtYVdOaGRHVnpNQ0lFSUgzSW4xNVJjdkNsWVBaVkd0bCtPb01qTXBjQjI1bGVEZVA2Q1pPYmpoVENNSUlCWlF3TVJXNTBhWFJzWlcxbGJuUnpjSUlCVXdJQkFiQ0NBVXd3TXd3V1lYQndiR2xqWVhScGIyNHRhV1JsYm5ScFptbGxjZ3daTXpKQk9FRkJRelJVT1M1amIyMHVNekpCT0VGQlF6UlVPVEFkREE5aGNITXRaVzUyYVhKdmJtMWxiblFNQ25CeWIyUjFZM1JwYjI0d0dBd1RZbVYwWVMxeVpYQnZjblJ6TFdGamRHbDJaUUVCL3pBc0RCOWpiMjB1WVhCd2JHVXVaR1YyWld4dmNHVnlMbUZ3Y0d4bGMybG5ibWx1TUFrTUIwUmxabUYxYkhRd0t3d21ZMjl0TG1Gd2NHeGxMbVJsZG1Wc2IzQmxjaTVoYzNOdlkybGhkR1ZrTFdSdmJXRnBibk1NQVNvd01Rd2pZMjl0TG1Gd2NHeGxMbVJsZG1Wc2IzQmxjaTUwWldGdExXbGtaVzUwYVdacFpYSU1Dak15UVRoQlFVTTBWRGt3RXd3T1oyVjBMWFJoYzJzdFlXeHNiM2NCQVFBd09Rd1dhMlY1WTJoaGFXNHRZV05qWlhOekxXZHliM1Z3Y3pBZkRBd3pNa0U0UVVGRE5GUTVMaW9NRDJOdmJTNWhjSEJzWlM1MGIydGxicUNDQ0R3d2dnSkRNSUlCeWFBREFnRUNBZ2d0eGZ5STBzVkxsVEFLQmdncWhrak9QUVFEQXpCbk1Sc3dHUVlEVlFRRERCSkJjSEJzWlNCU2IyOTBJRU5CSUMwZ1J6TXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVekFlRncweE5EQTBNekF4T0RFNU1EWmFGdzB6T1RBME16QXhPREU1TURaYU1HY3hHekFaQmdOVkJBTU1Fa0Z3Y0d4bElGSnZiM1FnUTBFZ0xTQkhNekVtTUNRR0ExVUVDd3dkUVhCd2JHVWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhreEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUVtT2t2UFVCeXBPMlRJbktCRXh6ZEVKWHh4YU5PY2R3VUZ0a081YVlGS25ka2UxOU9PTk83SEVTMWYvVWZ0akppWGNucGhGdFBNRThSV2dEOVdGZ01wZlVQTEUwSFJ4TjEycGVYbDI4eFhPMHJuWHNnTzlpNVZObGVtYVE2VVFveG8wSXdRREFkQmdOVkhRNEVGZ1FVdTdEZW9WZ3ppSnFraXBuZXZyM3JyOXJMSktzd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBT0JnTlZIUThCQWY4RUJBTUNBUVl3Q2dZSUtvWkl6ajBFQXdNRGFBQXdaUUl4QUlQcHdjUVdYaHBkTkJqWjdlLzBiQTRBUmt1NDM3SkdFY1VQL2VaNmpLR21hODdDQTlTYzlaUEdkTGhxMzZvakZRSXdiV2FLRU1yVURkUlB6WTFEUHJTS1k2VXpidU50MmhlM1pCL0lVeWI1aUdKME9Rc1hXOHRScUF6b0dBUG5vcklvTUlJQzVqQ0NBbTJnQXdJQkFnSUlNdzN1K0w5TWFDNHdDZ1lJS29aSXpqMEVBd013WnpFYk1Ca0dBMVVFQXd3U1FYQndiR1VnVW05dmRDQkRRU0F0SUVjek1TWXdKQVlEVlFRTERCMUJjSEJzWlNCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVUTUJFR0ExVUVDZ3dLUVhCd2JHVWdTVzVqTGpFTE1Ba0dBMVVFQmhNQ1ZWTXdIaGNOTVRjd01qSXlNakl5TXpJeVdoY05Nekl3TWpFNE1EQXdNREF3V2pCeU1TWXdKQVlEVlFRRERCMUJjSEJzWlNCVGVYTjBaVzBnU1c1MFpXZHlZWFJwYjI0Z1EwRWdOREVtTUNRR0ExVUVDd3dkUVhCd2JHVWdRMlZ5ZEdsbWFXTmhkR2x2YmlCQmRYUm9iM0pwZEhreEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUZrd0V3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFQm11a1ZtOTlueWZSemphT2todFd6VlEyWkVySmxHaVorc2tnZnVMMVdBL2M0bXJyR1Vjdkx1ODdwQUcwQVJORWZGb21yYUNjS1NXSzVlWUdiMDk4V3FPQjl6Q0I5REFQQmdOVkhSTUJBZjhFQlRBREFRSC9NQjhHQTFVZEl3UVlNQmFBRkx1dzNxRllNNGlhcElxWjNyNjk2Ni9heXlTck1FWUdDQ3NHQVFVRkJ3RUJCRG93T0RBMkJnZ3JCZ0VGQlFjd0FZWXFhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTFoY0hCc1pYSnZiM1JqWVdjek1EY0dBMVVkSHdRd01DNHdMS0Fxb0NpR0ptaDBkSEE2THk5amNtd3VZWEJ3YkdVdVkyOXRMMkZ3Y0d4bGNtOXZkR05oWnpNdVkzSnNNQjBHQTFVZERnUVdCQlI2UjdvNGloVWtTQ0pHemI2UEdpUjdOQU1xYVRBT0JnTlZIUThCQWY4RUJBTUNBUVl3RUFZS0tvWklodmRqWkFZQ0VRUUNCUUF3Q2dZSUtvWkl6ajBFQXdNRFp3QXdaQUl3RlF5cGpzYXZsbWxycDUvZFhOUURXV3l1VXRSZ3hvdDI0TGZGb3ZFSmZPQ2E0MnV4NDN3eHhDZDZwNDZKL2F0M0FqQmhNeUR4S2YvNWh6S3VLY2hrUFhaN1VhVFNBaTkydm1BaWtmSFZPblhjdE9MR0twYit4Z25jU2svVkpQRDh5ckl3Z2dNSE1JSUNyYUFEQWdFQ0FnZ1hnS2cwWm1UcXl6QUtCZ2dxaGtqT1BRUURBakJ5TVNZd0pBWURWUVFEREIxQmNIQnNaU0JUZVhOMFpXMGdTVzUwWldkeVlYUnBiMjRnUTBFZ05ERW1NQ1FHQTFVRUN3d2RRWEJ3YkdVZ1EyVnlkR2xtYVdOaGRHbHZiaUJCZFhSb2IzSnBkSGt4RXpBUkJnTlZCQW9NQ2tGd2NHeGxJRWx1WXk0eEN6QUpCZ05WQkFZVEFsVlRNQjRYRFRJME1URXlNREF6TWpBME5Wb1hEVEk0TVRJeE5ERTRNREF6TUZvd1RqRXFNQ2dHQTFVRUF3d2hWMWRFVWlCUWNtOTJhWE5wYjI1cGJtY2dVSEp2Wm1sc1pTQlRhV2R1YVc1bk1STXdFUVlEVlFRS0RBcEJjSEJzWlNCSmJtTXVNUXN3Q1FZRFZRUUdFd0pWVXpCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQlBXVVd3N0IxRlEvR2Q1R1lDVmZQbzRwejJ4UGs5VWN0MzIyVWw4ZjRmdGpBYktDRzZpaFRyVFQ3ZTlXdVJmVW1NMWd0ODVPcWJjNlYzWlQ2RE5EcjMyamdnRlBNSUlCU3pBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRkhwSHVqaUtGU1JJSWtiTnZvOGFKSHMwQXlwcE1FRUdDQ3NHQVFVRkJ3RUJCRFV3TXpBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTFoYzJsallUUXdNekNCbGdZRFZSMGdCSUdPTUlHTE1JR0lCZ2txaGtpRzkyTmtCUUV3ZXpCNUJnZ3JCZ0VGQlFjQ0FqQnRER3RVYUdseklHTmxjblJwWm1sallYUmxJR2x6SUhSdklHSmxJSFZ6WldRZ1pYaGpiSFZ6YVhabGJIa2dabTl5SUdaMWJtTjBhVzl1Y3lCcGJuUmxjbTVoYkNCMGJ5QkJjSEJzWlNCUWNtOWtkV04wY3lCaGJtUXZiM0lnUVhCd2JHVWdjSEp2WTJWemMyVnpMakFkQmdOVkhRNEVGZ1FVNlZMT0RiREdpQnBsU3JpYkVZL3gzQjVIRkh3d0RnWURWUjBQQVFIL0JBUURBZ2VBTUE4R0NTcUdTSWIzWTJRTUV3UUNCUUF3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU8rYXZGMmdXbVpzWkxuTk41T3BVN1EzeGNkczRZUDZGeHJlQ3ozV3EyaG1BaUI0STluRGlBZEpQZlg3aVkrUWJsamdWNTlqLzFqaDFvOWNtR1BXT2o0L25UR0NBZFl3Z2dIU0FnRUJNSDR3Y2pFbU1DUUdBMVVFQXd3ZFFYQndiR1VnVTNsemRHVnRJRWx1ZEdWbmNtRjBhVzl1SUVOQklEUXhKakFrQmdOVkJBc01IVUZ3Y0d4bElFTmxjblJwWm1sallYUnBiMjRnUVhWMGFHOXlhWFI1TVJNd0VRWURWUVFLREFwQmNIQnNaU0JKYm1NdU1Rc3dDUVlEVlFRR0V3SlZVd0lJRjRDb05HWms2c3N3RFFZSllJWklBV1VEQkFJQkJRQ2dnZWt3R0FZSktvWklodmNOQVFrRE1Rc0dDU3FHU0liM0RRRUhBVEFjQmdrcWhraUc5dzBCQ1FVeER4Y05NalV3T1RJMU1ESXpORE0xV2pBcUJna3Foa2lHOXcwQkNUUXhIVEFiTUEwR0NXQ0dTQUZsQXdRQ0FRVUFvUW9HQ0NxR1NNNDlCQU1DTUM4R0NTcUdTSWIzRFFFSkJERWlCQ0NiY3dOQXppbyttQkE1ZnVJbUVDamw0QW5zTkZQWEo3WXRpbWhyVkFLQWhqQlNCZ2txaGtpRzl3MEJDUTh4UlRCRE1Bb0dDQ3FHU0liM0RRTUhNQTRHQ0NxR1NJYjNEUU1DQWdJQWdEQU5CZ2dxaGtpRzl3MERBZ0lCUURBSEJnVXJEZ01DQnpBTkJnZ3Foa2lHOXcwREFnSUJLREFLQmdncWhrak9QUVFEQWdSR01FUUNJQVJ4aHB0Z0xmTFB2QU1zand2UE1yaUpBSkRKNW1SZGVZWm5VVTNlOGlrUUFpQTR1ajQ4akxvV3F5Ty90TFdJS0R1UzNNZS8wOTVpVDFTZ3lRK01jWmtoeHc9PTwvZGF0YT4KCQkJCQkJCQkJCQkJCQkJCQkJCgkJCTxrZXk+UFBRQ2hlY2s8L2tleT4KCTxmYWxzZS8+CgoJPGtleT5FbnRpdGxlbWVudHM8L2tleT4KCTxkaWN0PgoJCTxrZXk+YmV0YS1yZXBvcnRzLWFjdGl2ZTwva2V5PgoJCTx0cnVlLz4KCQkJCQoJCQkJPGtleT5hcHMtZW52aXJvbm1lbnQ8L2tleT4KCQk8c3RyaW5nPnByb2R1Y3Rpb248L3N0cmluZz4KCQkJCQoJCQkJPGtleT5jb20uYXBwbGUuZGV2ZWxvcGVyLmFzc29jaWF0ZWQtZG9tYWluczwva2V5PgoJCTxzdHJpbmc+Kjwvc3RyaW5nPgoJCQkJCgkJCQk8a2V5PmFwcGxpY2F0aW9uLWlkZW50aWZpZXI8L2tleT4KCQk8c3RyaW5nPjMyQThBQUM0VDkuY29tLjMyQThBQUM0VDk8L3N0cmluZz4KCQkJCQoJCQkJPGtleT5rZXljaGFpbi1hY2Nlc3MtZ3JvdXBzPC9rZXk+CgkJPGFycmF5PgoJCQkJPHN0cmluZz4zMkE4QUFDNFQ5Lio8L3N0cmluZz4KCQkJCTxzdHJpbmc+Y29tLmFwcGxlLnRva2VuPC9zdHJpbmc+CgkJPC9hcnJheT4KCQkJCQoJCQkJPGtleT5nZXQtdGFzay1hbGxvdzwva2V5PgoJCTxmYWxzZS8+CgkJCQkKCQkJCTxrZXk+Y29tLmFwcGxlLmRldmVsb3Blci50ZWFtLWlkZW50aWZpZXI8L2tleT4KCQk8c3RyaW5nPjMyQThBQUM0VDk8L3N0cmluZz4KCQkJCQoJCQkJPGtleT5jb20uYXBwbGUuZGV2ZWxvcGVyLmFwcGxlc2lnbmluPC9rZXk+CgkJPGFycmF5PgoJCQkJPHN0cmluZz5EZWZhdWx0PC9zdHJpbmc+CgkJPC9hcnJheT4KCQkKCTwvZGljdD4KCTxrZXk+RXhwaXJhdGlvbkRhdGU8L2tleT4KCTxkYXRlPjIwMjYtMDktMjVUMDI6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


          keychain-password: 111111

      # # 添加检查步骤
      - name: 检查构建文件
        run: |
          echo "检查 build/ios/ipa 目录内容："
          ls -la build/ios/ipa/
          echo "检查 build/ios 目录内容："
          ls -la build/ios/

      - name: Archive IPA
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa

          
      # - name: Upload using iTMSTransporter
      #   env:
      #     WORKING_DIRECTORY: build/ios/ipa
      #     IPA_FILE_NAME: oiyo.ipa
      #     APPLE_USERNAME: Nina2000HH@outlook.com
      #     APPLE_PASSWORD: zeqo-kyio-mlkw-kbwf
      #     APPLE_ASC_PROVIDER: 798RL7J5U7
      #   run: |
      #     cd $WORKING_DIRECTORY
      #     git clone https://github.com/ZhangLi1984/itsm.git
      #     ./itsm/bin/iTMSTransporter -assetFile $IPA_FILE_NAME -u $APPLE_USERNAME -p $APPLE_PASSWORD -m upload -asc_provider $APPLE_ASC_PROVIDER -v verbose

      - name: Upload to App Store using altool
        env:
          IPA_PATH: "build/ios/ipa/bavo.ipa"
          APPLE_ID: "susujiang2025@outlook.com"
          APP_SPECIFIC_PASSWORD: "ynwf-sudy-asxe-dtch"
        run: |
          xcrun altool --upload-app -f "$IPA_PATH" \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD" \
            --verbose
